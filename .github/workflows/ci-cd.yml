name: CI/CD for jozo-be

env:
  ENV_FILE: .env

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

concurrency:
  group: workflow-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  deployments: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm install

      - name: Inject environment variables
        run: echo "${{ secrets.ENV_FILE }}" > .env

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm install

      - name: Inject environment variables
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Get short SHA
        id: get_sha
        run: echo "::set-output name=GIT_SHA::$(git rev-parse --short HEAD)"

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/jozo-be:${{ steps.get_sha.outputs.GIT_SHA }} .

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/jozo-be:${{ steps.get_sha.outputs.GIT_SHA }}

      - name: Run deployment action in Jira
        uses: chrnorm/deployment-action@releases/v1
        with:
          environment: 'staging'
          token: ${{ secrets.GITHUB_TOKEN }}
          description: 'Deploying jozo-be to staging via Docker'

      - name: SSH into VPS and pull latest Docker image
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/jozo-be:${{ steps.get_sha.outputs.GIT_SHA }}

            # Kiểm tra xem container cũ có đang chạy không
            if docker ps | grep -q jozo-be; then
              echo "Container cũ đang chạy, tạm thời stop để giải phóng port"
              docker stop jozo-be
              # Đợi một chút để port được giải phóng hoàn toàn
              sleep 5
            fi

            # Chạy container mới với tên tạm thời
            echo "Chạy container mới..."
            docker run -d --name jozo-be-new -p 4000:4000 -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/jozo-be:${{ steps.get_sha.outputs.GIT_SHA }}

            # Kiểm tra container mới có chạy thành công không
            if docker ps | grep -q jozo-be-new; then
              echo "Container mới chạy thành công, tiến hành thay thế container cũ"
              # Remove container cũ (đã stop ở trên)
              docker rm jozo-be || true
              # Đổi tên container mới thành jozo-be
              docker rename jozo-be-new jozo-be
              echo "Thay thế container thành công"
            else
              echo "Container mới chạy thất bại, khôi phục container cũ"
              # Xóa container mới nếu chạy thất bại
              docker rm jozo-be-new || true
              # Khôi phục container cũ
              docker start jozo-be || true
              exit 1
            fi

  cleanup:
    runs-on: ubuntu-latest
    if: always() # Run this job even if the build fails
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Remove old Docker images from VPS
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            # Xóa các container không sử dụng trong 7 ngày
            docker container prune -f --filter "until=168h"
            # Xóa các image không sử dụng trong 7 ngày
            docker image prune -f --filter "until=168h"

      - name: Remove old images from Docker Hub
        run: |
          # Xóa các image không gắn tag (dangling) và cũ hơn 7 ngày
          images=$(docker images -q --filter "dangling=true" --filter "until=168h")
          if [ -n "$images" ]; then
            docker rmi $images
          fi
