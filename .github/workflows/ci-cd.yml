name: CI/CD for jozo-be

env:
  IMAGE_NAME: jozo-be

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: workflow-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install deps (CI)
        run: npm ci

      - name: Inject .env for CI (optional)
        if: ${{ secrets.ENV_FILE && secrets.ENV_FILE != '' }}
        shell: bash
        run: |
          cat > .env <<'EOF'
          ${{ secrets.ENV_FILE }}
          EOF

      # - name: Run tests (optional)
      #   run: npm test --if-present

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute short SHA
        id: meta
        shell: bash
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.GIT_SHA }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Mark deployment (Jira)
        uses: chrnorm/deployment-action@releases/v1
        with:
          environment: 'staging'
          token: ${{ secrets.GITHUB_TOKEN }}
          description: 'Deploying jozo-be to staging via Docker'

      - name: Deploy on VPS (pull & run)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          # Khuyên dùng SSH key:
          # key: ${{ secrets.VPS_SSH_KEY }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script_stop: true
          script: |
            set -euo pipefail

            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            mkdir -p /opt/${{ env.IMAGE_NAME }}
            if [ -n "${{ secrets.VPS_ENV_FILE }}" ]; then
              cat > /opt/${{ env.IMAGE_NAME }}/.env <<'EOF'
              ${{ secrets.VPS_ENV_FILE }}
              EOF
            fi

            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.GIT_SHA }}

            docker stop ${{ env.IMAGE_NAME }} || true
            docker rm ${{ env.IMAGE_NAME }} || true

            docker container prune -f --filter "until=168h" || true
            docker image prune -f --filter "until=168h" || true

            docker run -d --name ${{ env.IMAGE_NAME }} \
              --restart=always \
              -p 4000:4000 \
              -p 8080:8080 \
              $( [ -f /opt/${{ env.IMAGE_NAME }}/.env ] && echo "--env-file /opt/${{ env.IMAGE_NAME }}/.env" ) \
              ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.GIT_SHA }}

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Prune on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          # key: ${{ secrets.VPS_SSH_KEY }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            docker container prune -f --filter "until=168h" || true
            docker image prune -a -f --filter "until=168h" || true
