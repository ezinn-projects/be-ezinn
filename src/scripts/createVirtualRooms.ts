import { ObjectId } from 'mongodb'
import { RoomType } from '~/constants/enum'
import { VirtualRoom } from '~/models/schemas/VirtualRoom.schema'
import databaseService from '../services/database.service'

async function createVirtualRooms() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o Virtual Rooms...')

    // 0. Ki·ªÉm tra xem ƒë√£ c√≥ virtual rooms ch∆∞a
    const existingVirtualRooms = await databaseService.virtualRooms.find().toArray()
    if (existingVirtualRooms.length > 0) {
      console.log(`‚ö†Ô∏è  ƒê√£ c√≥ ${existingVirtualRooms.length} virtual rooms trong database`)
      console.log('üí° N·∫øu mu·ªën t·∫°o l·∫°i, h√£y x√≥a virtual rooms c≈© tr∆∞·ªõc')
      console.log('üìã Danh s√°ch virtual rooms hi·ªán t·∫°i:')
      existingVirtualRooms.forEach((vr, index) => {
        console.log(`  ${index + 1}. ${vr.virtualRoomName} - Size: ${vr.virtualSize}`)
      })
      return
    }

    // 1. L·∫•y danh s√°ch physical rooms
    const physicalRooms = await databaseService.rooms.find().sort({ roomId: 1 }).toArray()
    console.log(`üìã T√¨m th·∫•y ${physicalRooms.length} physical rooms`)

    // 2. T·∫°o virtual rooms v·ªõi hardcode theo th·ª© t·ª± ph√≤ng
    const virtualRooms: VirtualRoom[] = []

    physicalRooms.forEach((physicalRoom, index) => {
      const roomNumber = index + 1
      let virtualSize: RoomType
      let priority: number

      // Hardcode: Ph√≤ng 1-3 = Small, Ph√≤ng 4-6 = Medium, Ph√≤ng 7+ = Large
      if (roomNumber <= 3) {
        virtualSize = RoomType.Small
        priority = roomNumber
      } else if (roomNumber <= 6) {
        virtualSize = RoomType.Medium
        priority = roomNumber - 3
      } else {
        virtualSize = RoomType.Large
        priority = roomNumber - 6
      }

      virtualRooms.push(
        new VirtualRoom({
          _id: new ObjectId(),
          virtualRoomId: roomNumber,
          virtualRoomName: `Room ${virtualSize}${priority}`,
          virtualSize,
          physicalRoomId: physicalRoom._id,
          priority,
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date()
        })
      )
    })

    // 3. L∆∞u v√†o database
    await databaseService.virtualRooms.insertMany(virtualRooms)
    console.log(`‚úÖ ƒê√£ t·∫°o ${virtualRooms.length} virtual rooms`)

    // 4. Hi·ªÉn th·ªã k·∫øt qu·∫£
    console.log('\nüìä Danh s√°ch Virtual Rooms:')
    virtualRooms.forEach((vr) => {
      console.log(
        `  Ph√≤ng ${vr.virtualRoomId}: ${vr.virtualRoomName} (${vr.virtualSize}) -> Physical Room ${vr.physicalRoomId}`
      )
    })

    console.log('\nüéØ Ph√¢n lo·∫°i theo th·ª© t·ª± ph√≤ng:')
    console.log(`  Ph√≤ng 1-3: ${virtualRooms.filter((vr) => vr.virtualSize === RoomType.Small).length} ph√≤ng Small`)
    console.log(`  Ph√≤ng 4-6: ${virtualRooms.filter((vr) => vr.virtualSize === RoomType.Medium).length} ph√≤ng Medium`)
    console.log(`  Ph√≤ng 7+: ${virtualRooms.filter((vr) => vr.virtualSize === RoomType.Large).length} ph√≤ng Large`)
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o Virtual Rooms:', error)
    throw error
  }
}

// Ch·∫°y migration
if (require.main === module) {
  createVirtualRooms()
    .then(() => {
      console.log('üéâ Migration ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('üí• Migration th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

export { createVirtualRooms }
