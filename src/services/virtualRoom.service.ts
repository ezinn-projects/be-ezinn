import { ObjectId } from 'mongodb'
import { RoomSize, RoomType, RoomScheduleStatus } from '~/constants/enum'
import { VirtualRoom } from '~/models/schemas/VirtualRoom.schema'
import databaseService from './database.service'

interface VirtualRoomAssignment {
  virtualRoom: VirtualRoom
  physicalRoom: any
  assignedVirtualSize: RoomType
  actualPhysicalSize: RoomType
  upgraded: boolean
  upgradeReason?: string
}

class VirtualRoomService {
  /**
   * T·∫°o danh s√°ch virtual rooms t·ª´ physical rooms
   */
  async createVirtualRoomList(): Promise<VirtualRoom[]> {
    const physicalRooms = await databaseService.rooms.find().sort({ roomId: 1 }).toArray()

    const virtualRooms: VirtualRoom[] = []

    physicalRooms.forEach((physicalRoom, index) => {
      const roomNumber = index + 1
      let virtualSize: RoomType
      let priority: number

      // Hardcode: Ph√≤ng 1-3 = Small, Ph√≤ng 4-6 = Medium, Ph√≤ng 7+ = Large
      if (roomNumber <= 3) {
        virtualSize = RoomType.Small
        priority = roomNumber
      } else if (roomNumber <= 6) {
        virtualSize = RoomType.Medium
        priority = roomNumber - 3
      } else {
        virtualSize = RoomType.Large
        priority = roomNumber - 6
      }

      virtualRooms.push(
        new VirtualRoom({
          _id: new ObjectId(),
          virtualRoomId: index + 1,
          virtualRoomName: `Room ${virtualSize}${priority}`,
          virtualSize,
          physicalRoomId: physicalRoom._id,
          priority,
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date()
        })
      )
    })

    return virtualRooms
  }

  /**
   * T√¨m ph√≤ng ·∫£o tr·ªëng theo size y√™u c·∫ßu
   */
  async findAvailableVirtualRoom(
    requestedSize: RoomType,
    startTime: Date,
    endTime: Date
  ): Promise<VirtualRoomAssignment | null> {
    console.log(`üîç T√¨m ph√≤ng ${requestedSize} t·ª´ ${startTime.toISOString()} ƒë·∫øn ${endTime.toISOString()}`)

    // 1. T√¨m ph√≤ng ·∫£o c√≥ size ƒë√∫ng y√™u c·∫ßu
    const virtualRooms = await databaseService.virtualRooms
      .find({
        virtualSize: requestedSize,
        isActive: true
      })
      .sort({ priority: 1 })
      .toArray()

    console.log(`üìã T√¨m th·∫•y ${virtualRooms.length} virtual rooms c√≥ size ${requestedSize}`)
    if (virtualRooms.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ virtual rooms n√†o trong database!')
      return null
    }

    // 2. Ki·ªÉm tra t·ª´ng ph√≤ng ·∫£o c√≥ tr·ªëng kh√¥ng
    for (const virtualRoom of virtualRooms) {
      console.log(`üîç Ki·ªÉm tra ph√≤ng ${virtualRoom.virtualRoomName} (${virtualRoom.virtualSize})`)
      const isAvailable = await this.checkVirtualRoomAvailability(virtualRoom._id, startTime, endTime)

      if (isAvailable) {
        console.log(`‚úÖ Ph√≤ng ${virtualRoom.virtualRoomName} tr·ªëng!`)
        const physicalRoom = await databaseService.rooms.findOne({
          _id: virtualRoom.physicalRoomId
        })

        return {
          virtualRoom,
          physicalRoom,
          assignedVirtualSize: virtualRoom.virtualSize,
          actualPhysicalSize: physicalRoom?.roomType as RoomType,
          upgraded: false
        }
      } else {
        console.log(`‚ùå Ph√≤ng ${virtualRoom.virtualRoomName} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t`)
      }
    }

    // 3. Ch·ªâ khi size kh√°ch ƒë·∫∑t H·∫æT th√¨ m·ªõi t√¨m upgrade
    console.log(`T·∫•t c·∫£ ph√≤ng ${requestedSize} ƒë√£ h·∫øt, t√¨m upgrade...`)
    return await this.findUpgradeVirtualRoom(requestedSize, startTime, endTime)
  }

  /**
   * T√¨m ph√≤ng upgrade khi kh√¥ng c√≥ size ƒë√∫ng
   */
  private async findUpgradeVirtualRoom(
    requestedSize: RoomType,
    startTime: Date,
    endTime: Date
  ): Promise<VirtualRoomAssignment | null> {
    const upgradeMap = {
      [RoomType.Small]: [RoomType.Medium, RoomType.Large],
      [RoomType.Medium]: [RoomType.Large],
      [RoomType.Large]: []
    }

    const upgradeOptions = upgradeMap[requestedSize]

    for (const upgradeSize of upgradeOptions) {
      const virtualRooms = await databaseService.virtualRooms
        .find({
          virtualSize: upgradeSize,
          isActive: true
        })
        .sort({ priority: 1 })
        .toArray()

      for (const virtualRoom of virtualRooms) {
        const isAvailable = await this.checkVirtualRoomAvailability(virtualRoom._id, startTime, endTime)

        if (isAvailable) {
          const physicalRoom = await databaseService.rooms.findOne({
            _id: virtualRoom.physicalRoomId
          })

          return {
            virtualRoom,
            physicalRoom,
            assignedVirtualSize: virtualRoom.virtualSize,
            actualPhysicalSize: physicalRoom?.roomType as RoomType,
            upgraded: true,
            upgradeReason: `Upgraded from ${requestedSize} to ${virtualRoom.virtualSize}`
          }
        }
      }
    }

    return null
  }

  /**
   * Ki·ªÉm tra ph√≤ng ·∫£o c√≥ tr·ªëng kh√¥ng
   */
  private async checkVirtualRoomAvailability(
    virtualRoomId: ObjectId,
    startTime: Date,
    endTime: Date
  ): Promise<boolean> {
    // Ki·ªÉm tra trong room schedules c√≥ virtual room info kh√¥ng
    const existingSchedule = await databaseService.roomSchedule.findOne({
      'virtualRoomInfo.virtualRoomId': virtualRoomId,
      status: { $nin: [RoomScheduleStatus.Cancelled, RoomScheduleStatus.Finished] },
      $or: [
        {
          startTime: { $lt: endTime },
          endTime: { $gt: startTime }
        },
        {
          endTime: null,
          startTime: { $lt: endTime }
        }
      ]
    })

    return !existingSchedule
  }

  /**
   * L·∫•y danh s√°ch virtual rooms
   */
  async getVirtualRooms(): Promise<VirtualRoom[]> {
    return await databaseService.virtualRooms.find().sort({ priority: 1 }).toArray()
  }

  /**
   * Debug: Ki·ªÉm tra tr·∫°ng th√°i virtual rooms trong database
   */
  async debugVirtualRooms(): Promise<void> {
    console.log('üîç DEBUG: Ki·ªÉm tra virtual rooms trong database...')

    const allVirtualRooms = await databaseService.virtualRooms.find().toArray()
    console.log(`üìä T·ªïng s·ªë virtual rooms: ${allVirtualRooms.length}`)

    if (allVirtualRooms.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ virtual rooms n√†o trong database!')
      console.log('üí° C·∫ßn ch·∫°y script createVirtualRooms ƒë·ªÉ t·∫°o virtual rooms')
      return
    }

    console.log('\nüìã Danh s√°ch virtual rooms:')
    allVirtualRooms.forEach((vr, index) => {
      console.log(`  ${index + 1}. ${vr.virtualRoomName} - Size: ${vr.virtualSize} - Active: ${vr.isActive}`)
    })

    // Ki·ªÉm tra c√≥ virtual rooms v·ªõi RoomType.Small kh√¥ng
    const smallRooms = allVirtualRooms.filter((vr) => vr.virtualSize === RoomType.Small)
    console.log(`\nüè† Virtual rooms Small: ${smallRooms.length}`)

    if (smallRooms.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ virtual rooms Small n√†o!')
      console.log('üí° C√≥ th·ªÉ virtual rooms ƒëang s·ª≠ d·ª•ng RoomSize c≈© (S, M, L)')
    }
  }

  /**
   * C·∫≠p nh·∫≠t virtual room list
   */
  async updateVirtualRoomList(virtualRoomUpdates: any[]): Promise<void> {
    for (const update of virtualRoomUpdates) {
      await databaseService.virtualRooms.updateOne(
        { _id: new ObjectId(update.virtualRoomId) },
        {
          $set: {
            virtualSize: update.newVirtualSize,
            priority: update.newPriority,
            virtualRoomName: `Room ${update.newVirtualSize}${update.newPriority}`,
            updatedAt: new Date()
          }
        }
      )
    }
  }
}

export const virtualRoomService = new VirtualRoomService()
