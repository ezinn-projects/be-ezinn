import { ObjectId } from 'mongodb'
import dayjs from 'dayjs'
import timezone from 'dayjs/plugin/timezone'
import utc from 'dayjs/plugin/utc'
import { RoomType, RoomScheduleStatus } from '~/constants/enum'
import { HTTP_STATUS_CODE } from '~/constants/httpStatus'
import { ErrorWithStatus } from '~/models/Error'
import { RoomSchedule, BookingSource } from '~/models/schemas/RoomSchdedule.schema'
import databaseService from './database.service'
import { emitBookingNotification } from './room.service'
import fnbOrderService from './fnbOrder.service'

dayjs.extend(utc)
dayjs.extend(timezone)

interface OnlineBookingRequest {
  customerName: string
  customerPhone: string
  customerEmail?: string
  roomType: RoomType // S·ª≠ d·ª•ng RoomType ƒë·ªÉ ph√π h·ª£p v·ªõi frontend
  startTime: string // ISO string ho·∫∑c datetime format (YYYY-MM-DD HH:mm:ss) - s·∫Ω ƒë∆∞·ª£c parse theo timezone Vi·ªát Nam
  endTime: string // ISO string ho·∫∑c datetime format (YYYY-MM-DD HH:mm:ss) - s·∫Ω ƒë∆∞·ª£c parse theo timezone Vi·ªát Nam
  note?: string
}

interface RoomAvailabilityResult {
  room: any
  originalRequest: RoomType
  assignedRoomType: RoomType
  upgraded: boolean
}

class OnlineBookingService {
  /**
   * Parse th·ªùi gian v·ªõi timezone Vi·ªát Nam
   */
  private parseDateTimeWithTimezone(dateTimeStr: string): Date {
    let processedStr = dateTimeStr

    // N·∫øu kh√¥ng c√≥ timezone info, th√™m timezone Vi·ªát Nam
    if (!processedStr.includes('+') && !processedStr.includes('Z') && !processedStr.includes('T')) {
      // Format: "2024-01-15 20:00:00" -> "2024-01-15T20:00:00+07:00"
      processedStr = processedStr.replace(' ', 'T') + '+07:00'
    } else if (!processedStr.includes('+') && !processedStr.includes('Z')) {
      // Format: "2024-01-15T20:00:00" -> "2024-01-15T20:00:00+07:00"
      processedStr = processedStr + '+07:00'
    }

    // Parse v·ªõi dayjs ƒë·ªÉ x·ª≠ l√Ω timezone ƒë√∫ng c√°ch
    return dayjs.tz(processedStr, 'Asia/Ho_Chi_Minh').toDate()
  }

  /**
   * Validate th√¥ng tin booking
   */
  private validateBookingRequest(request: OnlineBookingRequest): void {
    // Validate th√¥ng tin kh√°ch h√†ng
    if (!request.customerName || request.customerName.trim().length < 2) {
      throw new ErrorWithStatus({
        message: 'T√™n kh√°ch h√†ng ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±',
        status: HTTP_STATUS_CODE.BAD_REQUEST
      })
    }

    if (!request.customerPhone) {
      throw new ErrorWithStatus({
        message: 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc',
        status: HTTP_STATUS_CODE.BAD_REQUEST
      })
    }

    // Validate SƒêT format
    const phoneRegex = /^[0-9]{10,11}$/
    const cleanPhone = request.customerPhone.replace(/[\s\-\(\)]/g, '')
    if (!phoneRegex.test(cleanPhone)) {
      throw new ErrorWithStatus({
        message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá',
        status: HTTP_STATUS_CODE.BAD_REQUEST
      })
    }

    // Validate email n·∫øu c√≥
    if (request.customerEmail) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
      if (!emailRegex.test(request.customerEmail)) {
        throw new ErrorWithStatus({
          message: 'Email kh√¥ng h·ª£p l·ªá',
          status: HTTP_STATUS_CODE.BAD_REQUEST
        })
      }
    }

    // Validate th·ªùi gian
    let startTime: Date
    let endTime: Date

    try {
      // Parse th·ªùi gian v·ªõi timezone Vi·ªát Nam
      startTime = this.parseDateTimeWithTimezone(request.startTime)
      endTime = this.parseDateTimeWithTimezone(request.endTime)

      // Ki·ªÉm tra xem c√≥ ph·∫£i invalid date kh√¥ng
      if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
        throw new Error('Invalid date format')
      }
    } catch (error) {
      throw new ErrorWithStatus({
        message: 'Invalid date format. Use ISO string format or datetime format (YYYY-MM-DD HH:mm:ss)',
        status: HTTP_STATUS_CODE.BAD_REQUEST
      })
    }

    const now = new Date()

    // Kh√¥ng cho ƒë·∫∑t qu√° kh·ª© (√≠t nh·∫•t 30 ph√∫t tr∆∞·ªõc)
    const minAdvanceTime = 30 * 60 * 1000 // 30 ph√∫t
    if (startTime < new Date(now.getTime() + minAdvanceTime)) {
      throw new ErrorWithStatus({
        message: 'Kh√¥ng th·ªÉ ƒë·∫∑t ph√≤ng trong v√≤ng 30 ph√∫t t·ªõi',
        status: HTTP_STATUS_CODE.BAD_REQUEST
      })
    }

    // Kh√¥ng cho ƒë·∫∑t qu√° xa (t·ªëi ƒëa 30 ng√†y)
    const maxAdvanceTime = 30 * 24 * 60 * 60 * 1000 // 30 ng√†y
    if (startTime > new Date(now.getTime() + maxAdvanceTime)) {
      throw new ErrorWithStatus({
        message: 'Ch·ªâ c√≥ th·ªÉ ƒë·∫∑t ph√≤ng tr∆∞·ªõc t·ªëi ƒëa 30 ng√†y',
        status: HTTP_STATUS_CODE.BAD_REQUEST
      })
    }

    // Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu
    if (endTime <= startTime) {
      throw new ErrorWithStatus({
        message: 'Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu',
        status: HTTP_STATUS_CODE.BAD_REQUEST
      })
    }

    // Th·ªùi gian ƒë·∫∑t ph√≤ng t·ªëi thi·ªÉu 30 ph√∫t, t·ªëi ƒëa 8 gi·ªù
    const duration = endTime.getTime() - startTime.getTime()
    const minDuration = 30 * 60 * 1000 // 30 ph√∫t
    const maxDuration = 8 * 60 * 60 * 1000 // 8 gi·ªù

    if (duration < minDuration) {
      throw new ErrorWithStatus({
        message: 'Th·ªùi gian ƒë·∫∑t ph√≤ng t·ªëi thi·ªÉu l√† 30 ph√∫t',
        status: HTTP_STATUS_CODE.BAD_REQUEST
      })
    }

    if (duration > maxDuration) {
      throw new ErrorWithStatus({
        message: 'Th·ªùi gian ƒë·∫∑t ph√≤ng t·ªëi ƒëa l√† 8 gi·ªù',
        status: HTTP_STATUS_CODE.BAD_REQUEST
      })
    }

    // Kh√¥ng cho ƒë·∫∑t v√†o gi·ªù ngh·ªâ - s·ª≠ d·ª•ng timezone Vi·ªát Nam
    const vietnamTime = dayjs.tz(startTime, 'Asia/Ho_Chi_Minh')
    const hour = vietnamTime.hour()
    if (hour < 10 || hour > 23) {
      throw new ErrorWithStatus({
        message: 'Ch·ªâ c√≥ th·ªÉ ƒë·∫∑t ph√≤ng t·ª´ 10:00 ƒë·∫øn 23:00',
        status: HTTP_STATUS_CODE.BAD_REQUEST
      })
    }
  }

  /**
   * T√¨m ph√≤ng tr·ªëng v·ªõi hardcode logic: Ph√≤ng 1-3 = Small, 4-6 = Medium, 7+ = Large
   */
  private async findAvailableRoomWithHardcode(
    requestedSize: RoomType,
    startTime: Date,
    endTime: Date
  ): Promise<RoomAvailabilityResult | null> {
    console.log(`üîç T√¨m ph√≤ng ${requestedSize} v·ªõi hardcode logic...`)

    // L·∫•y t·∫•t c·∫£ ph√≤ng v√† s·∫Øp x·∫øp theo roomId
    const allRooms = await databaseService.rooms.find().sort({ roomId: 1 }).toArray()
    console.log(`üìã T√¨m th·∫•y ${allRooms.length} ph√≤ng trong database`)

    // Hardcode: Ph√≤ng 1-3 = Small, Ph√≤ng 4-6 = Medium, Ph√≤ng 7+ = Large
    const roomMapping = {
      [RoomType.Small]: allRooms.slice(0, 3), // Ph√≤ng 1, 2, 3
      [RoomType.Medium]: allRooms.slice(3, 6), // Ph√≤ng 4, 5, 6
      [RoomType.Large]: allRooms.slice(6) // Ph√≤ng 7+
    }

    // 1. T√¨m ph√≤ng c√≥ size ƒë√∫ng y√™u c·∫ßu
    const targetRooms = roomMapping[requestedSize]
    console.log(
      `üéØ Ph√≤ng ${requestedSize}: ${targetRooms.length} ph√≤ng (${targetRooms.map((r) => r.roomName).join(', ')})`
    )

    for (const room of targetRooms) {
      const isAvailable = await this.checkRoomAvailability(room._id, startTime, endTime)
      if (isAvailable) {
        console.log(`‚úÖ T√¨m th·∫•y ph√≤ng tr·ªëng: ${room.roomName}`)
        return {
          room,
          originalRequest: requestedSize,
          assignedRoomType: requestedSize,
          upgraded: false
        }
      }
    }

    // 2. N·∫øu kh√¥ng c√≥ ph√≤ng size ƒë√∫ng, t√¨m upgrade
    console.log(`‚ùå Kh√¥ng c√≥ ph√≤ng ${requestedSize} tr·ªëng, t√¨m upgrade...`)

    const upgradeMap = {
      [RoomType.Small]: [RoomType.Medium, RoomType.Large],
      [RoomType.Medium]: [RoomType.Large],
      [RoomType.Large]: []
    }

    const upgradeOptions = upgradeMap[requestedSize]

    for (const upgradeSize of upgradeOptions) {
      const upgradeRooms = roomMapping[upgradeSize]
      console.log(`üîÑ Th·ª≠ upgrade l√™n ${upgradeSize}: ${upgradeRooms.length} ph√≤ng`)

      for (const room of upgradeRooms) {
        const isAvailable = await this.checkRoomAvailability(room._id, startTime, endTime)
        if (isAvailable) {
          console.log(`‚úÖ T√¨m th·∫•y ph√≤ng upgrade: ${room.roomName} (${upgradeSize})`)
          return {
            room,
            originalRequest: requestedSize,
            assignedRoomType: upgradeSize,
            upgraded: true
          }
        }
      }
    }

    console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng n√†o tr·ªëng`)
    return null
  }

  /**
   * Ki·ªÉm tra ph√≤ng c√≥ tr·ªëng kh√¥ng
   */
  private async checkRoomAvailability(roomId: ObjectId, startTime: Date, endTime: Date): Promise<boolean> {
    const existingSchedule = await databaseService.roomSchedule.findOne({
      roomId: roomId,
      status: { $nin: [RoomScheduleStatus.Cancelled, RoomScheduleStatus.Finished] },
      $or: [
        {
          startTime: { $lt: endTime },
          endTime: { $gt: startTime }
        },
        {
          endTime: null,
          startTime: { $lt: endTime }
        }
      ]
    })

    return !existingSchedule
  }

  /**
   * T·∫°o booking online v·ªõi Virtual Room system
   */
  async createOnlineBooking(request: OnlineBookingRequest): Promise<any> {
    try {
      // Validate request
      this.validateBookingRequest(request)

      // Parse dates t·ª´ request v·ªõi timezone Vi·ªát Nam
      const startTime = this.parseDateTimeWithTimezone(request.startTime)
      const endTime = this.parseDateTimeWithTimezone(request.endTime)

      // T√¨m ph√≤ng tr·ªëng v·ªõi hardcode logic
      const roomResult = await this.findAvailableRoomWithHardcode(request.roomType, startTime, endTime)

      if (!roomResult) {
        throw new ErrorWithStatus({
          message: `Xin l·ªói, kh√¥ng c√≤n box ${request.roomType} tr·ªëng trong khung gi·ªù n√†y`,
          status: HTTP_STATUS_CODE.CONFLICT
        })
      }

      // T·∫°o booking note ƒë∆°n gi·∫£n
      const autoNote = `Booking by ${request.customerName} (${request.customerPhone})${roomResult.upgraded ? ` - UPGRADE to ${roomResult.assignedRoomType}` : ''}`

      // T·∫°o RoomSchedule
      const newSchedule = new RoomSchedule(
        roomResult.room._id.toString(),
        startTime,
        RoomScheduleStatus.Booked,
        endTime,
        'online_customer',
        'online_customer',
        autoNote,
        BookingSource.Customer,
        request.customerName,
        request.customerPhone,
        request.customerEmail,
        request.roomType,
        roomResult.assignedRoomType,
        roomResult.upgraded
      )

      // L∆∞u v√†o database
      const result = await databaseService.roomSchedule.insertOne(newSchedule)

      // T·ª± ƒë·ªông t·∫°o FNB order tr·ªëng cho booking online
      try {
        const emptyOrder = {
          drinks: {},
          snacks: {}
        }
        await fnbOrderService.createFnbOrder(result.insertedId.toString(), emptyOrder, 'online_customer')
      } catch (fnbOrderError) {
        console.error('L·ªói khi t·∫°o FNB order t·ª± ƒë·ªông:', fnbOrderError)
      }

      // Emit notification
      const bookingNotification = {
        action: 'booked',
        bookingId: result.insertedId.toString(),
        roomId: roomResult.room._id.toString(),
        roomName: roomResult.room.roomName,
        customerName: request.customerName,
        customerPhone: request.customerPhone,
        customerEmail: request.customerEmail,
        startTime: startTime.toISOString(),
        endTime: endTime.toISOString(),
        note: autoNote,
        source: 'online_booking',
        createdAt: new Date().toISOString(),
        upgraded: roomResult.upgraded,
        originalRequest: roomResult.originalRequest,
        assignedRoomType: roomResult.assignedRoomType
      }

      emitBookingNotification(roomResult.room._id.toString(), bookingNotification)

      return {
        success: true,
        booking: {
          _id: result.insertedId.toString(),
          roomName: roomResult.room.roomName,
          originalRequest: roomResult.originalRequest,
          assignedRoomType: roomResult.assignedRoomType,
          upgraded: roomResult.upgraded,
          startTime: startTime.toISOString(),
          endTime: endTime.toISOString(),
          note: autoNote
        }
      }
    } catch (error) {
      console.error('Error creating online booking:', error)

      // N·∫øu error ƒë√£ l√† ErrorWithStatus th√¨ throw l·∫°i
      if (error instanceof ErrorWithStatus) {
        throw error
      }

      // N·∫øu l√† error kh√°c th√¨ wrap th√†nh ErrorWithStatus
      throw new ErrorWithStatus({
        message: error instanceof Error ? error.message : 'Error creating online booking',
        status: HTTP_STATUS_CODE.INTERNAL_SERVER_ERROR
      })
    }
  }

  /**
   * Tra c·ª©u booking b·∫±ng s·ªë ƒëi·ªán tho·∫°i
   */
  async lookupBookingByPhone(phone: string): Promise<any> {
    try {
      // Clean phone number
      const cleanPhone = phone.replace(/[\s\-\(\)]/g, '')

      // T√¨m room schedules theo SƒêT (bao g·ªìm c·∫£ cancelled ƒë·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠)
      const schedules = await databaseService.roomSchedule
        .find({
          customerPhone: { $regex: new RegExp(cleanPhone, 'i') },
          status: { $in: [RoomScheduleStatus.Booked, RoomScheduleStatus.InUse, RoomScheduleStatus.Cancelled] }
        })
        .toArray()

      // S·∫Øp x·∫øp theo createdAt gi·∫£m d·∫ßn (g·∫ßn nh·∫•t tr∆∞·ªõc) - s·∫Øp x·∫øp th·ªß c√¥ng ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng
      schedules.sort((a, b) => {
        const dateA = new Date(a.createdAt || 0).getTime()
        const dateB = new Date(b.createdAt || 0).getTime()
        return dateB - dateA // Gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
      })

      if (schedules.length === 0) {
        return {
          success: true,
          phone: phone,
          bookings: [],
          message: 'Kh√¥ng t√¨m th·∫•y booking n√†o cho s·ªë ƒëi·ªán tho·∫°i n√†y'
        }
      }

      // L·∫•y th√¥ng tin ph√≤ng cho m·ªói schedule
      const bookingsWithDetails = await Promise.all(
        schedules.map(async (schedule) => {
          const room = await databaseService.rooms.findOne({
            _id: schedule.roomId
          })

          // Ki·ªÉm tra c√≥ th·ªÉ ch·ªânh s·ª≠a/h·ªßy kh√¥ng
          const now = new Date()
          const canModify = schedule.startTime > now
          const canCancel = canModify && schedule.status === RoomScheduleStatus.Booked

          return {
            _id: schedule._id?.toString(),
            roomId: schedule.roomId.toString(),
            startTime: schedule.startTime.toISOString(),
            endTime: schedule.endTime?.toISOString(),
            status: schedule.status,
            createdAt: schedule.createdAt?.toISOString(),
            createdBy: schedule.createdBy,
            updatedAt: schedule.updatedAt?.toISOString(),
            updatedBy: schedule.updatedBy,
            note: schedule.note,
            source: schedule.source,
            customerName: schedule.customerName,
            customerPhone: schedule.customerPhone,
            customerEmail: schedule.customerEmail,
            originalRoomType: schedule.originalRoomType,
            actualRoomType: schedule.actualRoomType,
            upgraded: schedule.upgraded,
            // Th√™m th√¥ng tin ph√≤ng v√† tr·∫°ng th√°i cho frontend
            roomName: room?.roomName,
            canModify,
            canCancel
          }
        })
      )

      return {
        success: true,
        data: bookingsWithDetails,
        message: `T√¨m th·∫•y ${bookingsWithDetails.length} ƒë·∫∑t ph√≤ng`
      }
    } catch (error) {
      console.error('Error looking up booking:', error)
      throw error
    }
  }

  /**
   * H·ªßy booking
   */
  async cancelBooking(bookingId: string, phone: string): Promise<any> {
    try {
      if (!ObjectId.isValid(bookingId)) {
        throw new ErrorWithStatus({
          message: 'Invalid booking ID',
          status: HTTP_STATUS_CODE.BAD_REQUEST
        })
      }

      // T√¨m booking
      const schedule = await databaseService.roomSchedule.findOne({
        _id: new ObjectId(bookingId),
        customerPhone: { $regex: new RegExp(phone.replace(/[\s\-\(\)]/g, ''), 'i') }
      })

      if (!schedule) {
        throw new ErrorWithStatus({
          message: 'Booking not found or phone number does not match',
          status: HTTP_STATUS_CODE.NOT_FOUND
        })
      }

      // Ki·ªÉm tra c√≥ th·ªÉ h·ªßy kh√¥ng
      const now = new Date()
      if (schedule.startTime <= now) {
        throw new ErrorWithStatus({
          message: 'Cannot cancel past bookings',
          status: HTTP_STATUS_CODE.BAD_REQUEST
        })
      }

      if (schedule.status !== RoomScheduleStatus.Booked) {
        throw new ErrorWithStatus({
          message: 'Only booked schedules can be cancelled',
          status: HTTP_STATUS_CODE.BAD_REQUEST
        })
      }

      // C·∫≠p nh·∫≠t status th√†nh cancelled
      await databaseService.roomSchedule.updateOne(
        { _id: new ObjectId(bookingId) },
        {
          $set: {
            status: RoomScheduleStatus.Cancelled,
            updatedAt: new Date(),
            updatedBy: 'customer'
          }
        }
      )

      // Emit socket notification cho admin v·ªÅ vi·ªác h·ªßy booking
      const cancelNotification = {
        bookingId: bookingId,
        roomId: schedule.roomId.toString(),
        action: 'cancelled',
        customerName: schedule.customerName,
        customerPhone: schedule.customerPhone,
        startTime: schedule.startTime.toISOString(),
        endTime: schedule.endTime?.toISOString(),
        cancelledAt: new Date().toISOString(),
        source: 'online_booking'
      }

      emitBookingNotification(schedule.roomId.toString(), cancelNotification)

      return {
        success: true,
        message: 'Booking cancelled successfully',
        bookingId: bookingId
      }
    } catch (error) {
      console.error('Error cancelling booking:', error)
      throw error
    }
  }
}

export const onlineBookingService = new OnlineBookingService()
